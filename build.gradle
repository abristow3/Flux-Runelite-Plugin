plugins {
    id 'java'
}

def runeLiteVersion = 'latest.release'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.runelite.net')
        content {
            includeGroupByRegex("net\\.runelite.*")
        }
    }
    mavenCentral()
}

dependencies {
    compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.json:json:20200518'

    implementation('com.google.apis:google-api-services-sheets:v4-rev20240514-2.0.0') {
        exclude group: 'com.google.guava'
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'commons-logging'
        exclude group: 'commons-codec'
    }
    implementation('com.google.api-client:google-api-client:2.6.0') {
        exclude group: 'com.google.oauth-client'
        exclude group: 'com.google.guava'
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'commons-codec'
    }
    implementation('com.google.oauth-client:google-oauth-client-jetty:1.36.0') {
        exclude group: 'com.google.guava'
        exclude group: 'org.apache.httpcomponents'
    }

    implementation 'com.google.http-client:google-http-client-jackson2:1.44.2'

    testImplementation 'junit:junit:4.12'
    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion
}

group = 'com.flux'
version = '1.0-SNAPSHOT'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(11)
}

tasks.register('shadowJar', Jar) {
    dependsOn configurations.testRuntimeClasspath
    manifest {
        attributes(
                'Main-Class': 'com.flux.FluxPluginTest',
                'Multi-Release': true
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    from sourceSets.test.output
    from {
        configurations.testRuntimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }
    exclude 'META-INF/INDEX.LIST'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude '**/module-info.class'

    group = BasePlugin.BUILD_GROUP
    archiveClassifier.set('shadow')
    archiveFileName.set("${rootProject.name}-${project.version}-all.jar")
}